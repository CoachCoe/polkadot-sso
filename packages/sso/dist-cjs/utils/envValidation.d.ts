import { z } from 'zod';
declare const envSchema: z.ZodObject<{
    SESSION_SECRET: z.ZodString;
    NODE_ENV: z.ZodDefault<z.ZodEnum<["development", "production", "test"]>>;
    PORT: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>;
    DATABASE_URL: z.ZodOptional<z.ZodString>;
    DATABASE_PATH: z.ZodDefault<z.ZodString>;
    DB_POOL_MIN: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>;
    DB_POOL_MAX: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>;
    DB_POOL_ACQUIRE_TIMEOUT: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>;
    DB_POOL_IDLE_TIMEOUT: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>;
    DB_POOL_REAP_INTERVAL: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>;
    REDIS_URL: z.ZodOptional<z.ZodString>;
    REDIS_MAX_RETRIES: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>;
    REDIS_CONNECT_TIMEOUT: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>;
    REDIS_PING_INTERVAL: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>;
    ALLOWED_ORIGINS: z.ZodDefault<z.ZodEffects<z.ZodString, string[], string>>;
    COOKIE_DOMAIN: z.ZodOptional<z.ZodString>;
    COOKIE_SECURE: z.ZodDefault<z.ZodEffects<z.ZodString, boolean, string>>;
    JWT_SECRET: z.ZodOptional<z.ZodString>;
    JWT_ISSUER: z.ZodDefault<z.ZodString>;
    JWT_ACCESS_TOKEN_EXPIRY: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>;
    JWT_REFRESH_TOKEN_EXPIRY: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>;
    RATE_LIMIT_WINDOW_MS: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>;
    RATE_LIMIT_MAX_REQUESTS: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>;
    COMPRESSION_LEVEL: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>;
    COMPRESSION_THRESHOLD: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodString, number, string>, z.ZodNumber>>;
    STATIC_CACHE_MAX_AGE: z.ZodDefault<z.ZodString>;
    STATIC_CACHE_ENABLED: z.ZodDefault<z.ZodEffects<z.ZodString, boolean, string>>;
    KUSAMA_ENDPOINT: z.ZodOptional<z.ZodString>;
    KUSAMA_ACCOUNT_TYPE: z.ZodDefault<z.ZodEnum<["sr25519", "ed25519", "ecdsa"]>>;
    DEFAULT_CLIENT_SECRET: z.ZodOptional<z.ZodString>;
    LOG_LEVEL: z.ZodDefault<z.ZodEnum<["error", "warn", "info", "debug"]>>;
    LOG_FILE: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    DB_POOL_MIN: number;
    DB_POOL_MAX: number;
    DB_POOL_ACQUIRE_TIMEOUT: number;
    DB_POOL_IDLE_TIMEOUT: number;
    DB_POOL_REAP_INTERVAL: number;
    JWT_ISSUER: string;
    SESSION_SECRET: string;
    NODE_ENV: "development" | "production" | "test";
    PORT: number;
    DATABASE_PATH: string;
    REDIS_MAX_RETRIES: number;
    REDIS_CONNECT_TIMEOUT: number;
    REDIS_PING_INTERVAL: number;
    ALLOWED_ORIGINS: string[];
    COOKIE_SECURE: boolean;
    JWT_ACCESS_TOKEN_EXPIRY: number;
    JWT_REFRESH_TOKEN_EXPIRY: number;
    RATE_LIMIT_WINDOW_MS: number;
    RATE_LIMIT_MAX_REQUESTS: number;
    COMPRESSION_LEVEL: number;
    COMPRESSION_THRESHOLD: number;
    STATIC_CACHE_MAX_AGE: string;
    STATIC_CACHE_ENABLED: boolean;
    KUSAMA_ACCOUNT_TYPE: "sr25519" | "ed25519" | "ecdsa";
    LOG_LEVEL: "error" | "info" | "warn" | "debug";
    REDIS_URL?: string | undefined;
    DEFAULT_CLIENT_SECRET?: string | undefined;
    DATABASE_URL?: string | undefined;
    COOKIE_DOMAIN?: string | undefined;
    JWT_SECRET?: string | undefined;
    KUSAMA_ENDPOINT?: string | undefined;
    LOG_FILE?: string | undefined;
}, {
    SESSION_SECRET: string;
    DB_POOL_MIN?: string | undefined;
    DB_POOL_MAX?: string | undefined;
    DB_POOL_ACQUIRE_TIMEOUT?: string | undefined;
    DB_POOL_IDLE_TIMEOUT?: string | undefined;
    DB_POOL_REAP_INTERVAL?: string | undefined;
    REDIS_URL?: string | undefined;
    JWT_ISSUER?: string | undefined;
    DEFAULT_CLIENT_SECRET?: string | undefined;
    NODE_ENV?: "development" | "production" | "test" | undefined;
    PORT?: string | undefined;
    DATABASE_URL?: string | undefined;
    DATABASE_PATH?: string | undefined;
    REDIS_MAX_RETRIES?: string | undefined;
    REDIS_CONNECT_TIMEOUT?: string | undefined;
    REDIS_PING_INTERVAL?: string | undefined;
    ALLOWED_ORIGINS?: string | undefined;
    COOKIE_DOMAIN?: string | undefined;
    COOKIE_SECURE?: string | undefined;
    JWT_SECRET?: string | undefined;
    JWT_ACCESS_TOKEN_EXPIRY?: string | undefined;
    JWT_REFRESH_TOKEN_EXPIRY?: string | undefined;
    RATE_LIMIT_WINDOW_MS?: string | undefined;
    RATE_LIMIT_MAX_REQUESTS?: string | undefined;
    COMPRESSION_LEVEL?: string | undefined;
    COMPRESSION_THRESHOLD?: string | undefined;
    STATIC_CACHE_MAX_AGE?: string | undefined;
    STATIC_CACHE_ENABLED?: string | undefined;
    KUSAMA_ENDPOINT?: string | undefined;
    KUSAMA_ACCOUNT_TYPE?: "sr25519" | "ed25519" | "ecdsa" | undefined;
    LOG_LEVEL?: "error" | "info" | "warn" | "debug" | undefined;
    LOG_FILE?: string | undefined;
}>;
export type ValidatedEnv = z.infer<typeof envSchema>;
export interface EnvValidationResult {
    valid: boolean;
    env: ValidatedEnv | null;
    errors: string[];
    warnings: string[];
}
export declare function validateEnvironment(): EnvValidationResult;
export declare function getValidatedEnv(): ValidatedEnv;
export declare const env: {
    DB_POOL_MIN: number;
    DB_POOL_MAX: number;
    DB_POOL_ACQUIRE_TIMEOUT: number;
    DB_POOL_IDLE_TIMEOUT: number;
    DB_POOL_REAP_INTERVAL: number;
    JWT_ISSUER: string;
    SESSION_SECRET: string;
    NODE_ENV: "development" | "production" | "test";
    PORT: number;
    DATABASE_PATH: string;
    REDIS_MAX_RETRIES: number;
    REDIS_CONNECT_TIMEOUT: number;
    REDIS_PING_INTERVAL: number;
    ALLOWED_ORIGINS: string[];
    COOKIE_SECURE: boolean;
    JWT_ACCESS_TOKEN_EXPIRY: number;
    JWT_REFRESH_TOKEN_EXPIRY: number;
    RATE_LIMIT_WINDOW_MS: number;
    RATE_LIMIT_MAX_REQUESTS: number;
    COMPRESSION_LEVEL: number;
    COMPRESSION_THRESHOLD: number;
    STATIC_CACHE_MAX_AGE: string;
    STATIC_CACHE_ENABLED: boolean;
    KUSAMA_ACCOUNT_TYPE: "sr25519" | "ed25519" | "ecdsa";
    LOG_LEVEL: "error" | "info" | "warn" | "debug";
    REDIS_URL?: string | undefined;
    DEFAULT_CLIENT_SECRET?: string | undefined;
    DATABASE_URL?: string | undefined;
    COOKIE_DOMAIN?: string | undefined;
    JWT_SECRET?: string | undefined;
    KUSAMA_ENDPOINT?: string | undefined;
    LOG_FILE?: string | undefined;
};
export {};
//# sourceMappingURL=envValidation.d.ts.map